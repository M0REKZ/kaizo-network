name: Build-KZ

on:
  workflow_dispatch:

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      CARGO_HTTP_MULTIPLEXING: false
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
        - os: ubuntu-latest
          cmake-path: /usr/bin/
          cmake-args: -G Ninja -DCLIENT=ON -DTOOLS=OFF -DPREFER_BUNDLED_LIBS=ON -Wno-error=dev
          cmake-init-env: CXXFLAGS=
          gtest-env: GTEST_FILTER=-*SQLite*
          package-file: "*-linux_x86_64.tar.xz"
          fancy: false
        #- os: macOS-latest
        #  cmake-args: -G Ninja
        #  cmake-init-env: CXXFLAGS=
        #  package-file: "*-macos.dmg"
        #  fancy: false
        - os: windows-latest
          cmake-args: -A x64
          cmake-init-env: CXXFLAGS=/WX LDFLAGS=/WX
          package-file: "*-win64.zip"
          fancy: false

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        # mount: /var/lib/grub/esp: special device /dev/disk/by-id/scsi-... does not exist.
        # sudo apt-get upgrade -y
        sudo apt-get install clang pkg-config cmake ninja-build libfreetype6-dev libnotify-dev libsdl2-dev libsqlite3-dev libvulkan-dev glslang-tools spirv-tools libavcodec-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev libx264-dev libpng-dev valgrind gcovr libglew-dev -y

    - name: Prepare Linux (non-fancy)
      if: ${{ contains(matrix.os, 'ubuntu') && !matrix.fancy }}
      run: |
        # Our minimum supported Rust version (MSRV)
        rustup default 1.63.0

    - name: Prepare macOS
      if: contains(matrix.os, 'macOS')
      run: |
        brew update || true
        brew install pkg-config sdl2 ffmpeg ninja molten-vk vulkan-headers glslang spirv-tools rust || true
        brew upgrade freetype
        pip3 install --break-system-packages dmgbuild
        echo /Library/Frameworks/Python.framework/Versions/3.12/bin >> $GITHUB_PATH
        sudo rm -rf /Library/Developer/CommandLineTools

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build in release mode
      run: |
        mkdir release
        cd release
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Release --target everything ${{ matrix.build-args }}

    - name: Package
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release --target package_default ${{ matrix.build-args }}
        mkdir artifacts
        mv ${{ matrix.package-file }} artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: KZNet-${{ matrix.os }}
        path: release/artifacts

    - name: Create a release in GitHub and upload attachment
      if: '!cancelled()'
      run: |
        gh release create latest release/artifacts/${{ matrix.package-file }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
